@using Shared.Bookings

<td style="background-color: @_state.StatusColor; cursor:pointer"
    @onclick="OnSlotClick">
    @_state.StatusText
</td>

<Modal Title="@("Thông tin đặt sân")"
       @bind-Visible="@_visible"
       Style="top: 20px"
       OnOk="HandleOkModal"
       OnCancel="HandleCancelModal">
    @FormTemplate()
</Modal>

<Modal Title="@("Tạm ngưng đặt sân")"
       @bind-Visible="@_pauseVisible"
       OnOk="HandleOkPauseModal"
       OnCancel="HandleCancelPauseModal">
    @PauseTemplate()
</Modal>

@code {

    RenderFragment FormTemplate()
    {
        return @<div class="booking-info">
        @if(_state is PendingState)
    {
        <Button Color="Color.Cyan9" OnClick="ApproveBooking" AutoLoading>Duyệt</Button>
        <Button Color="Color.Gold2" OnClick="RejectBooking" AutoLoading>Từ chối</Button>
    }
    else if(_state is BookedState)
    {
        <Button Color="Color.Cyan9" OnClick="OpenPauseBookingModal" AutoLoading>Tạm ngưng</Button>
    // <Button Color="Color.Cyan9" OnClick="Complee" AutoLoading>Kết thúc</Button>
    }
    else if(_state is PausedState)
    {
        <Button Color="Color.Cyan9" OnClick="ResumeBooking" AutoLoading>Tiếp tục</Button>
    // <Button Color="Color.Cyan9" OnClick="ApproveBooking" AutoLoading>Kết thúc</Button>
    }
        <Flex Gap="10.ToString()" Justify="FlexJustify.SpaceBetween">
            <strong>Mã đơn:</strong> <p> #@booking.Id</p>
        </Flex>
        <Flex Gap="10.ToString()" Justify="FlexJustify.SpaceBetween">
            <strong>Ngày tạo đơn:</strong>
            <p>@booking.Details?.FirstOrDefault()?.BeginAt?.ToString("dd/MM/yyyy")</p>
        </Flex>
        <Flex Gap="10.ToString()" Justify="FlexJustify.SpaceBetween">
            <strong>Người đặt:</strong><p> @booking.MemberName</p>
        </Flex>
        <Flex Gap="10.ToString()" Justify="FlexJustify.SpaceBetween">
            <strong>Trạng thái:</strong>
            <p>@_state.StatusText</p>
        </Flex>
        <Flex Gap="10.ToString()" Justify="FlexJustify.SpaceBetween">
            <strong>Loại đặt sân:</strong>
            <p>
                @((int)booking.Type == 1? "Đặt trong ngày" : "Đặt cố định")
            </p>
        </Flex>
        @if (booking.Type == BookingType.InDay)
    {

    }
    else
    {
        <Flex Gap="10.ToString()" Justify="FlexJustify.SpaceBetween">
            <strong>Ngày bắt đầu:</strong> <p> @booking.Details?.FirstOrDefault()?.BeginAt?.ToString("dd/MM/yyyy")</p>
        </Flex>
        <Flex Gap="10.ToString()" Justify="FlexJustify.SpaceBetween">
            <strong>Ngày kết thúc:</strong><p> @booking.Details?.FirstOrDefault()?.EndAt?.ToString("dd/MM/yyyy")</p>
        </Flex>
    }

        <div>
            <strong>Chi tiết đặt sân:</strong>
            @if (booking.Details != null && booking.Details.Any())
        {
        foreach (var detail in booking.Details)
        {
            <Flex Gap="10.ToString()" Justify="FlexJustify.SpaceBetween">
                <strong>Khung giờ:</strong>
                <span>@detail.StartTime - @detail.EndTime</span>
            </Flex>
            <Flex Gap="10.ToString()" Justify="FlexJustify.SpaceBetween">
                <strong>Ngày:</strong> <p> @detail.BeginAt?.ToString("dd/MM/yyyy") - @(detail.EndAt.HasValue ? detail.EndAt.Value.ToString("dd/MM/yyyy") : "Chưa thiết lập")</p>
            </Flex>
            <Flex Gap="10.ToString()" Justify="FlexJustify.SpaceBetween">
                <strong>Ngày trong tuần:</strong> <p> @detail.DayOfWeek.ToVnDayOfWeek()</p>
            </Flex>
        }
        }
        else
        {
            <p>Không có chi tiết đặt sân.</p>
        }
        </div>
    </div>
        ;
        ;
    }

    RenderFragment PauseTemplate()
    {
        return @<div class="booking-info">
        <DatePicker Placeholder="@("Ngày ngưng")" TValue=DateTimeOffset? @bind-Value=_pauseAt />
        <DatePicker Placeholder="@("Ngày tiếp tục")" TValue=DateTimeOffset? @bind-Value=_resumeAt />
    </div>
    ;
    }

    bool _visible = false;
    bool _submitting = false;

    bool _pauseVisible = false;

    private void ShowModal()
    {
        _visible = true;
    }

    private async Task HandleOkModal(MouseEventArgs e)
    {
        _submitting = true;
        await Task.Delay(1000);
    }

    private void HandleCancelModal(MouseEventArgs e)
    {
        Console.WriteLine(e);
    }

    private async Task HandleOkPauseModal(MouseEventArgs e)
    {
        _submitting = true;
        bool result = await PauseBooking();
        if (result)
        {
            await MessageService.Success("Thao tác thành công", 2);
            MessageService.Destroy();
        }
        else
        {
            await MessageService.Error("Lỗi máy chủ!", 2);
            MessageService.Destroy();
        }
    }

    private void HandleCancelPauseModal(MouseEventArgs e)
    {
        _visible = true;
    }
    private void OpenPauseBookingModal()
    {
        _pauseVisible = true;
    }
}