@using Shared.Bookings
@inject BookingService BookingService

<Table @ref="_table"
       TItem="BookingDTO"
       PageSize="pageSize"
       Total="_total"
       DataSource="_data"
       RowKey="m => m.Id.ToString()"
       @bind-PageIndex="@pageNumber">
    <PropertyColumn Property="c =>c.Id" Title="#">
        @context.Id
    </PropertyColumn>
    <PropertyColumn Property="c =>c.CreatedAt" Title="Ngày tạo đơn">
        @context.CreatedAt.ToString("dd/MM/yyyy hh:mm:ss")
    </PropertyColumn>
    <PropertyColumn Property="c =>c.MemberName" Title="Người đặt">
        @context.MemberName
    </PropertyColumn>
    <PropertyColumn Property="c =>c.TeamName" Title="Team">
        @context.TeamName
    </PropertyColumn>
    <PropertyColumn Property="c =>c.Type" Title="Loại đặt">
        @(context.Type == BookingType.InDay ? "Trong ngày" : "Cố định")
    </PropertyColumn>
    <PropertyColumn Property="c =>c.PaymentMethod" Title="Hình thức thanh toán">
        @context.PaymentMethod.ToVnPaymentMethod()
    </PropertyColumn>
    <PropertyColumn Property="c =>c.VoucherName" Title="Phiếu giảm giá">
        @(context.VoucherName ?? "Không áp dụng")
    </PropertyColumn>
    <PropertyColumn Property="c =>c.Discount" Title="Tiền sân">
        @if (context.Type == BookingType.Fixed_UnSetEndDate && context.Status != BookingStatus.Completed)
        {
            @: chưa thể tính @(context.Discount > 0? $"(giảm {context.Discount.ToString("#,0")})" :"")
        }
        else
        {
            if (context.Discount > 0)
            {
                <del>@context.EstimateCost.ToString("#,0")</del> @: - @context.Deposit.ToString("#,0")
            }
            else
            {
                @context.Amount.ToString("#,0")
            }
        }
    </PropertyColumn>
    <PropertyColumn Property="c =>c.Status" Title="Trạng thái">
        @context.Status.DisplayStatus()
    </PropertyColumn>
    <ActionColumn Title="Thao tác">
    </ActionColumn>
</Table>

@code {
    private ITable _table;
    private IEnumerable<BookingDTO> _data = [];
    private int pageSize = 10;
    private int pageNumber = 1;
    int _total;

    BookingDTO[] _selectedRows = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var result = await BookingService.GetAllAsync();
        _data = result.OrderByDescending(p => p.Id);
        _total = result.Count();
    }
}
