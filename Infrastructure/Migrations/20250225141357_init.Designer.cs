// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250225141357_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PersonalPoints")
                        .HasColumnType("float");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<double>("RewardPoints")
                        .HasColumnType("float");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8c18473e-f0be-4202-bc37-38ced67318cb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16f27721-27a8-4812-99fe-03bdd1e67e85",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 14, 13, 56, 737, DateTimeKind.Unspecified).AddTicks(509), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Email = "nghuuan2803@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NGHUUAN2803@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEIZz4erD+gay8IBrpf2XSmpiVeci/jIkvZYTQSiNL8r9+vPQ7XgcEBEaLdTduNQHEw==",
                            PersonalPoints = 0.0,
                            PhoneNumberConfirmed = false,
                            RewardPoints = 0.0,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "845d2699-2419-4cd6-96ac-1d592f143e41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de54d49f-9429-40c1-8ffa-8bb49d621e45",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 14, 13, 56, 737, DateTimeKind.Unspecified).AddTicks(516), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Email = "anhuu2803@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANHUU2803@GMAIL.COM",
                            NormalizedUserName = "SYS_ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEN2iTha805bc48lwWsm/2SsFHmdNHUGG8R1yaMbB/ZNVj6r4GkglfZh6Q+1xASaitg==",
                            PersonalPoints = 0.0,
                            PhoneNumberConfirmed = false,
                            RewardPoints = 0.0,
                            TwoFactorEnabled = false,
                            UserName = "sys_admin"
                        },
                        new
                        {
                            Id = "0cb31850-6e26-43b0-bd66-ae58e99cad7d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "538b3989-d40b-4fb8-ac41-f3805471c089",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 14, 13, 56, 737, DateTimeKind.Unspecified).AddTicks(520), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Email = "anhuu2803@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANHUU2803@GMAIL.COM",
                            NormalizedUserName = "manager",
                            PasswordHash = "AQAAAAIAAYagAAAAEKyW1rVEQA8ZJzT1uv1ulEmqUUP8DqGSeLs6GBWEOORPvMBg3hJZqmNJbm1u+LNCkA==",
                            PersonalPoints = 0.0,
                            PhoneNumberConfirmed = false,
                            RewardPoints = 0.0,
                            TwoFactorEnabled = false,
                            UserName = "manager"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminNote")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("ApprovedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Deposit")
                        .HasColumnType("float");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset?>("PausedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ResumeDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("TeamId");

                    b.HasIndex("VoucherId")
                        .IsUnique()
                        .HasFilter("[VoucherId] IS NOT NULL");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Domain.Entities.BookingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amonut")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("BeginAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("CourtId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("DayOfWeek")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTimeOffset?>("EndAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("CourtId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("BookingDetails");
                });

            modelBuilder.Entity("Domain.Entities.BookingHold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("BeginAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("BookingType")
                        .HasColumnType("int");

                    b.Property<int>("CourtId")
                        .HasColumnType("int");

                    b.Property<string>("DayOfWeek")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTimeOffset?>("EndAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("HeldAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("HeldBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("BookingHolds");
                });

            modelBuilder.Entity("Domain.Entities.BusinessRule", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Value")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BusinessRules");

                    b.HasData(
                        new
                        {
                            Id = "open_time",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(1893), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            IsApplied = true,
                            Name = "Giờ mở cửa",
                            Value = "05:00"
                        },
                        new
                        {
                            Id = "close_time",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(1931), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            IsApplied = true,
                            Name = "Giờ đóng cửa",
                            Value = "22:00"
                        },
                        new
                        {
                            Id = "price_friday",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(1932), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            IsApplied = true,
                            Name = "Chỉnh giá thứ 6",
                            Value = "1.1"
                        },
                        new
                        {
                            Id = "price_saturday",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(1934), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            IsApplied = true,
                            Name = "Chỉnh giá thứ 7",
                            Value = "1.2"
                        },
                        new
                        {
                            Id = "price_sunday",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(1935), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            IsApplied = true,
                            Name = "Chỉnh giá Chủ nhật",
                            Value = "1.2"
                        },
                        new
                        {
                            Id = "deposit_rate_hourly",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(1936), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            IsApplied = false,
                            Name = "Yêu cầu đặt cọc khi đặt theo giờ",
                            Value = "0.2 p"
                        },
                        new
                        {
                            Id = "deposit_rate_fixed",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(1938), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            IsApplied = true,
                            Name = "Yêu cầu đặt cọc khi đặt cố định",
                            Value = "1 d"
                        },
                        new
                        {
                            Id = "payment_hourly",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(1939), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            IsApplied = true,
                            Name = "Yêu cầu thanh toán khi đặt theo giờ",
                            Value = ""
                        },
                        new
                        {
                            Id = "login_hourly",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(1940), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            IsApplied = false,
                            Name = "Yêu cầu đăng nhập khi đặt theo giờ",
                            Value = ""
                        },
                        new
                        {
                            Id = "login_fixed",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(1942), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            IsApplied = true,
                            Name = "Yêu cầu đăng nhập khi đặt cố định",
                            Value = ""
                        },
                        new
                        {
                            Id = "release_slot",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(1943), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            IsApplied = true,
                            Name = "Thời gian tự nhả lịch nếu không đặt",
                            Value = "5:00"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ContributionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("TeamId");

                    b.ToTable("ContributionHistories");
                });

            modelBuilder.Entity("Domain.Entities.Court", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Coofficient")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<string>("Images")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("Courts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Coofficient = 1.2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3998), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            FacilityId = 1,
                            Name = "Sân 1 (VIP)",
                            Status = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            Coofficient = 1.2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(4001), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            FacilityId = 1,
                            Name = "Sân 2 (VIP)",
                            Status = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Coofficient = 1.0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(4003), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            FacilityId = 1,
                            Name = "Sân 3",
                            Status = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            Coofficient = 1.0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(4004), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            FacilityId = 1,
                            Name = "Sân 4",
                            Status = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            Coofficient = 1.0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(4006), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            FacilityId = 1,
                            Name = "Sân 5",
                            Status = 1,
                            Type = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Coofficient")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Images")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Layout")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlaceId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "16 Đ. 53, Phường 14, Gò Vấp, Hồ Chí Minh",
                            Coofficient = 1.0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3967), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Latitude = "10.850212299999999",
                            Longitude = "106.64369049999999",
                            Name = "Sân cầu Focus",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.LeftHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("JoinedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LeftAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("TeamId");

                    b.ToTable("LeftHistories");
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("Contributed")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int?>("CurrentTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTimeOffset?>("JoinedTeamAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("OldTeam")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.HasIndex("CurrentTeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Data")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<string>("Receiver")
                        .HasMaxLength(46)
                        .HasColumnType("nvarchar(46)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Info")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Domain.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("BeginAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("EndAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Facilities")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Images")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double?>("MaximunValue")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TiersRequired")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "be4ab03e-0ce3-4ee0-ba17-2a666a185455",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Name = "team_leader",
                            NormalizedName = "TEAM_LEADER"
                        },
                        new
                        {
                            Id = "225a8b8f-6895-4429-8e64-76355415fa94",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Name = "manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "7a4dff7f-3d6a-4883-800b-7103ce57af94",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Name = "member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = "3a8535c5-15c8-4d21-b9f4-d47cf0b4ef0b",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Name = "coach",
                            NormalizedName = "COACH"
                        },
                        new
                        {
                            Id = "40632c41-b76e-4a46-b74a-4f2f4d42661d",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "9af7d912-ca02-41ce-a82f-86e859573129",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Name = "guest",
                            NormalizedName = "GUEST"
                        },
                        new
                        {
                            Id = "bdd06cc1-4b82-48ce-9aa2-2f574bd1896c",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1ce72cac-5134-437d-bd03-0f76c5180afe",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Name = "sys_admin",
                            NormalizedName = "SYS_ADMIN"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("LeaderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("RewardPoints")
                        .HasColumnType("float");

                    b.Property<double>("TeamPoints")
                        .HasColumnType("float");

                    b.Property<int?>("TeamTierId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Domain.Entities.TeamTier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("MinPoints")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.ToTable("TeamTiers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(2419), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            DiscountPercent = 0.050000000000000003,
                            MinPoints = 500000.0,
                            Name = "Đồng"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(2423), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            DiscountPercent = 0.10000000000000001,
                            MinPoints = 1500000.0,
                            Name = "Bạc"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(2425), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            DiscountPercent = 0.14999999999999999,
                            MinPoints = 5000000.0,
                            Name = "Vàng"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(2426), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            DiscountPercent = 0.20000000000000001,
                            MinPoints = 15000000.0,
                            Name = "Kim Cương"
                        });
                });

            modelBuilder.Entity("Domain.Entities.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.ToTable("TimeSlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(2665), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 5, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(2697), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 6, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 5, 30, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(2721), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 6, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(2746), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 7, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 6, 30, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(2925), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 7, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3077), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 8, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 7, 30, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3119), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 8, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3184), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 9, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 8, 30, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3209), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 9, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3232), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 10, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3255), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 10, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3276), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 10, 30, 0, 0)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3297), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 11, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3319), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 11, 30, 0, 0)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3348), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 12, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3371), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 13, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 12, 30, 0, 0)
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3393), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 13, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3416), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 13, 30, 0, 0)
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3438), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 14, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3459), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 14, 30, 0, 0)
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3481), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 15, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3503), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 15, 30, 0, 0)
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3557), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3580), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 16, 30, 0, 0)
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3603), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 17, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3624), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 17, 30, 0, 0)
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3646), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 18, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3667), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 19, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 18, 30, 0, 0)
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3732), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 19, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 19, 0, 0, 0)
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3756), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 19, 30, 0, 0)
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3785), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 20, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 20, 0, 0, 0)
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3808), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 21, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 20, 30, 0, 0)
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3831), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 21, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 21, 0, 0, 0)
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3856), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 22, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 21, 30, 0, 0)
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3878), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 22, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 22, 0, 0, 0)
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3899), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 23, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 22, 30, 0, 0)
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3921), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(0, 23, 30, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 23, 0, 0, 0)
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(3943), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            Duration = 0.5,
                            EndTime = new TimeSpan(1, 0, 0, 0, 0),
                            IsApplied = true,
                            IsDeleted = false,
                            Price = 50000.0,
                            StartTime = new TimeSpan(0, 23, 30, 0, 0)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Code")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("Expiry")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<double>("MaximumValue")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Origin")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<int?>("VoucherTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("VoucherTemplateId");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("Domain.Entities.VoucherTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<double>("MaximumValue")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("VoucherTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(2535), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            DiscountType = 1,
                            Duration = 30,
                            MaximumValue = 0.0,
                            Name = "Phiếu giảm giá 10%",
                            Value = 10.0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(2532), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            DiscountType = 1,
                            Duration = 30,
                            MaximumValue = 0.0,
                            Name = "Phiếu giảm giá 15%",
                            Value = 15.0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(2537), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            DiscountType = 1,
                            Duration = 15,
                            MaximumValue = 0.0,
                            Name = "Phiếu giảm giá 20%",
                            Value = 20.0
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(2539), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            DiscountType = 0,
                            Duration = 15,
                            MaximumValue = 0.0,
                            Name = "Phiếu giảm giá 20.000đ",
                            Value = 20000.0
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 21, 13, 56, 973, DateTimeKind.Unspecified).AddTicks(2540), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "system",
                            DiscountType = 0,
                            Duration = 15,
                            MaximumValue = 0.0,
                            Name = "Phiếu giảm giá 30.000đ",
                            Value = 30000.0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8c18473e-f0be-4202-bc37-38ced67318cb",
                            RoleId = "bdd06cc1-4b82-48ce-9aa2-2f574bd1896c"
                        },
                        new
                        {
                            UserId = "845d2699-2419-4cd6-96ac-1d592f143e41",
                            RoleId = "1ce72cac-5134-437d-bd03-0f76c5180afe"
                        },
                        new
                        {
                            UserId = "0cb31850-6e26-43b0-bd66-ae58e99cad7d",
                            RoleId = "225a8b8f-6895-4429-8e64-76355415fa94"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId");

                    b.HasOne("Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("Domain.Entities.Voucher", "Voucher")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Booking", "VoucherId");

                    b.Navigation("Member");

                    b.Navigation("Promotion");

                    b.Navigation("Team");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Domain.Entities.BookingDetail", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany("Details")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TimeSlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Court");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("Domain.Entities.BookingHold", b =>
                {
                    b.HasOne("Domain.Entities.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TimeSlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Court");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("Domain.Entities.ContributionHistory", b =>
                {
                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Entities.Court", b =>
                {
                    b.HasOne("Domain.Entities.Facility", "Facility")
                        .WithMany("Courts")
                        .HasForeignKey("FacilityId");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Domain.Entities.LeftHistory", b =>
                {
                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Member", "AccountId");

                    b.HasOne("Domain.Entities.Team", "CurrentTeam")
                        .WithMany()
                        .HasForeignKey("CurrentTeamId");

                    b.HasOne("Domain.Entities.Team", null)
                        .WithMany("Members")
                        .HasForeignKey("TeamId");

                    b.Navigation("Account");

                    b.Navigation("CurrentTeam");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Domain.Entities.Team", b =>
                {
                    b.HasOne("Domain.Entities.Member", "Leader")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Team", "LeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("Domain.Entities.Voucher", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Domain.Entities.VoucherTemplate", "VoucherTemplate")
                        .WithMany()
                        .HasForeignKey("VoucherTemplateId");

                    b.Navigation("Account");

                    b.Navigation("VoucherTemplate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Domain.Entities.Facility", b =>
                {
                    b.Navigation("Courts");
                });

            modelBuilder.Entity("Domain.Entities.Team", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
